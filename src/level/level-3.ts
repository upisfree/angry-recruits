import Entity from '../entity/entity';
import Shell from '../entity/shell/shell';
import Slingshot from '../entity/slingshot';
import Phaser from '../lib/phaser';
import Level4 from './level-4';
import Level3Data from './data/level-3.data';
import addEnvironment from './shared/add-environment';
import create from './shared/create';
import initDebugCamera from './shared/init-debug-camera';
import preload from './shared/preload';
import update from './shared/update';
import createDisappearingEvent from '../ui/create-disappearing-event';

export default class Level3 extends (<any>Phaser.Scene) {
  enemies: Array<Entity> = [];
  shells: Array<Shell> = [];
  entities: Array<Entity>;
  slingshot: Slingshot;
  levelData: any = Level3Data;
  nextLevel: any = Level4;
  winTimeout: number = 2500;
  score: number = 0;
  zoom: number = 0.35;
  isWin: boolean;
  winTimeEvent: any;
  scoreText: any;
  commissarWithDialog: any;

  preload = preload.bind(this);
  update = update.bind(this);
  initDebugCamera = initDebugCamera.bind(this);
  addEnvironment = addEnvironment.bind(this);

  cameraControls: any;

  constructor(config) {
    super(config);
  }

  create() {
    let events = [
      this.commissarText('–±—Ä–∞—Ç–∞–Ω', 5000),
      this.commissarText('–ø–æ–ø—É—Å—Ç–∏', 7500),
      this.commissarText('–≤—Å—ë', 10000),
      this.commissarText('–±—É–¥–µ—Ç', 10500),
      this.commissarText('–ø—É—Ç—ë–º', 11000),
      this.commissarText('–Ω–æ—Ä–º–∞–ª—ë–∫', 13000),
      this.commissarText('–ø—Ä–æ—Ä–≤—ë–º—Å—è', 14500),
      this.commissarText('–≤–º–µ—Å—Ç–µ', 16500),
      this.commissarText('—è –Ω–µ –≥–æ–ª—É–±–æ–π', 20000),
      this.commissarText('–Ω—É –∫–æ—Ä–æ—á–µ –Ω–µ –≤–∞–∂–Ω–æ))', 22000),
      this.commissarText('–ø–æ–≥–Ω–∞–ª–∏ –∫ –Ω–∞–º', 23000),
      this.commissarText('—Å–∏—Ä–∏—è', 24000),
      this.commissarText('–¥–æ–Ω–±–∞—Å—Å', 25000),
      this.commissarText('–æ–º—Å–∫', 26000),
      this.commissarText('–ø—Ä–∞–≤–¥–∞ –∑–∞–≥—Ä–∞–Ω –∑–∞–±–µ—Ä—ë–º   ', 28000),
      this.commissarText('–Ω–µ —Å—Ç—Ä–µ–ª—è–π', 32000),
      this.commissarText('—è —Å–≤–æ–π', 34000),
      this.commissarText('—Ç—ã –∫—Å—Ç–∞—Ç–∏ –≥–¥–µ –∂–∏–≤—ë—à—å  ', 36000),
      this.commissarText('—è –≤–æ—Ç —Ç—É—Ç –Ω–µ–¥–∞–ª–µ–∫–æ', 39000),
      this.commissarText('–∑–∞—Ö–æ–¥–∏ –Ω–∞ —á–∞—ë–∫)', 41000),
      this.commissarText('–µ—Å–ª–∏', 45000),
      this.commissarText('—Ç—ã', 46000),
      this.commissarText('–Ω–µ', 47000),
      this.commissarText('–≥–æ–ª—É–±–æ–π', 48000),
      this.commissarText('–¥–æ—Ä–∏—Å—É–π', 49000),
      this.commissarText('–≤–∞–≥–æ–Ω', 50000),
      this.commissarText('–¥—Ä—É–≥–æ–π', 51000),
      this.commissarText(')))', 52000),
      this.commissarText('üá∑üá∫', 57000),
      this.commissarText('üá∑üá∫', 57500),
      this.commissarText('üá∑üá∫', 58000),
      this.commissarText('üá∑üá∫', 58500),
      {
        type: 'text',
        data: '—Å—É–∫–∞ –æ–Ω –∑–∞–µ–±–∞–ª',
        x: 700,
        y: 200,
        delay: 52000,
        duration: 2000,
        scale: 1.5
      },
      {
        type: 'text',
        data: '—ë–±–Ω–∏ –µ–≥–æ —É–∂–µ',
        x: 700,
        y: 200,
        delay: 54000,
        duration: 2000,
        scale: 1.5
      }
    ];

    events.forEach((v) => {
      this.time.addEvent({
        delay: v.delay,
        callback: () => {
          if (this.commissarWithDialog && !this.commissarWithDialog.isDestroyed) {
            createDisappearingEvent(this, v.x, v.y, v.type, v.data, v.scale, v.duration);            
          }
        }
      });
    });

    create.bind(this)();

    this.commissarWithDialog = this.enemies[4];

    this.add.sprite(5300, 465, 'lenin');

    let tutorialText = this.add.text(
      300,
      -500,
      '–í–æ –≤—Ä–µ–º—è –ø–æ–ª—ë—Ç–∞ –ø—É—Ö–ª–æ–≥–æ –ø—Ä–∏–∑—ã–≤–Ω–∏–∫–∞ –ª—É—á—à–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω!',
      {
        fontSize: 26,
        fontFamily: '"Press Start 2P"' // –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ —Ç—É—Ç –Ω–µ—Å–ø—Ä–æ—Å—Ç–∞: https://github.com/photonstorm/phaser/blob/v3.16.1/src/gameobjects/text/static/Text.js#L31
      }
    ).setScale(2.5, 2.5);
  }

  commissarText(t, d) {
    return {
      type: 'text',
      data: t,
      x: 3300,
      y: 550,
      delay: d,
      duration: 2500,
      scale: 1
    };
  }
}